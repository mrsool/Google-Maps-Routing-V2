# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/maps/routing/v2/routes_service_pb"
require "google/maps/routing/v2/routes_service_services_pb"
require "google/maps/routing/v2/routes"

class ::Google::Maps::Routing::V2::Routes::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_compute_routes
    # Create GRPC objects.
    grpc_response = ::Google::Maps::Routing::V2::ComputeRoutesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    origin = {}
    destination = {}
    intermediates = [{}]
    travel_mode = :TRAVEL_MODE_UNSPECIFIED
    routing_preference = :ROUTING_PREFERENCE_UNSPECIFIED
    polyline_quality = :POLYLINE_QUALITY_UNSPECIFIED
    polyline_encoding = :POLYLINE_ENCODING_UNSPECIFIED
    departure_time = {}
    arrival_time = {}
    compute_alternative_routes = true
    route_modifiers = {}
    language_code = "hello world"
    region_code = "hello world"
    units = :UNITS_UNSPECIFIED
    optimize_waypoint_order = true
    requested_reference_routes = [:REFERENCE_ROUTE_UNSPECIFIED]
    extra_computations = [:EXTRA_COMPUTATION_UNSPECIFIED]
    traffic_model = :TRAFFIC_MODEL_UNSPECIFIED
    transit_preferences = {}

    compute_routes_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :compute_routes, name
      assert_kind_of ::Google::Maps::Routing::V2::ComputeRoutesRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Routing::V2::Waypoint), request["origin"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Routing::V2::Waypoint), request["destination"]
      assert_kind_of ::Google::Maps::Routing::V2::Waypoint, request["intermediates"].first
      assert_equal :TRAVEL_MODE_UNSPECIFIED, request["travel_mode"]
      assert_equal :ROUTING_PREFERENCE_UNSPECIFIED, request["routing_preference"]
      assert_equal :POLYLINE_QUALITY_UNSPECIFIED, request["polyline_quality"]
      assert_equal :POLYLINE_ENCODING_UNSPECIFIED, request["polyline_encoding"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Timestamp), request["departure_time"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Timestamp), request["arrival_time"]
      assert_equal true, request["compute_alternative_routes"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Routing::V2::RouteModifiers), request["route_modifiers"]
      assert_equal "hello world", request["language_code"]
      assert_equal "hello world", request["region_code"]
      assert_equal :UNITS_UNSPECIFIED, request["units"]
      assert_equal true, request["optimize_waypoint_order"]
      assert_equal [:REFERENCE_ROUTE_UNSPECIFIED], request["requested_reference_routes"]
      assert_equal [:EXTRA_COMPUTATION_UNSPECIFIED], request["extra_computations"]
      assert_equal :TRAFFIC_MODEL_UNSPECIFIED, request["traffic_model"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Routing::V2::TransitPreferences), request["transit_preferences"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, compute_routes_client_stub do
      # Create client
      client = ::Google::Maps::Routing::V2::Routes::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.compute_routes({ origin: origin, destination: destination, intermediates: intermediates, travel_mode: travel_mode, routing_preference: routing_preference, polyline_quality: polyline_quality, polyline_encoding: polyline_encoding, departure_time: departure_time, arrival_time: arrival_time, compute_alternative_routes: compute_alternative_routes, route_modifiers: route_modifiers, language_code: language_code, region_code: region_code, units: units, optimize_waypoint_order: optimize_waypoint_order, requested_reference_routes: requested_reference_routes, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.compute_routes origin: origin, destination: destination, intermediates: intermediates, travel_mode: travel_mode, routing_preference: routing_preference, polyline_quality: polyline_quality, polyline_encoding: polyline_encoding, departure_time: departure_time, arrival_time: arrival_time, compute_alternative_routes: compute_alternative_routes, route_modifiers: route_modifiers, language_code: language_code, region_code: region_code, units: units, optimize_waypoint_order: optimize_waypoint_order, requested_reference_routes: requested_reference_routes, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.compute_routes ::Google::Maps::Routing::V2::ComputeRoutesRequest.new(origin: origin, destination: destination, intermediates: intermediates, travel_mode: travel_mode, routing_preference: routing_preference, polyline_quality: polyline_quality, polyline_encoding: polyline_encoding, departure_time: departure_time, arrival_time: arrival_time, compute_alternative_routes: compute_alternative_routes, route_modifiers: route_modifiers, language_code: language_code, region_code: region_code, units: units, optimize_waypoint_order: optimize_waypoint_order, requested_reference_routes: requested_reference_routes, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.compute_routes({ origin: origin, destination: destination, intermediates: intermediates, travel_mode: travel_mode, routing_preference: routing_preference, polyline_quality: polyline_quality, polyline_encoding: polyline_encoding, departure_time: departure_time, arrival_time: arrival_time, compute_alternative_routes: compute_alternative_routes, route_modifiers: route_modifiers, language_code: language_code, region_code: region_code, units: units, optimize_waypoint_order: optimize_waypoint_order, requested_reference_routes: requested_reference_routes, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.compute_routes(::Google::Maps::Routing::V2::ComputeRoutesRequest.new(origin: origin, destination: destination, intermediates: intermediates, travel_mode: travel_mode, routing_preference: routing_preference, polyline_quality: polyline_quality, polyline_encoding: polyline_encoding, departure_time: departure_time, arrival_time: arrival_time, compute_alternative_routes: compute_alternative_routes, route_modifiers: route_modifiers, language_code: language_code, region_code: region_code, units: units, optimize_waypoint_order: optimize_waypoint_order, requested_reference_routes: requested_reference_routes, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, compute_routes_client_stub.call_rpc_count
    end
  end

  def test_compute_route_matrix
    # Create GRPC objects.
    grpc_response = ::Google::Maps::Routing::V2::RouteMatrixElement.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a server streaming method.
    origins = [{}]
    destinations = [{}]
    travel_mode = :TRAVEL_MODE_UNSPECIFIED
    routing_preference = :ROUTING_PREFERENCE_UNSPECIFIED
    departure_time = {}
    arrival_time = {}
    language_code = "hello world"
    region_code = "hello world"
    extra_computations = [:EXTRA_COMPUTATION_UNSPECIFIED]
    traffic_model = :TRAFFIC_MODEL_UNSPECIFIED
    transit_preferences = {}

    compute_route_matrix_client_stub = ClientStub.new [grpc_response].to_enum, grpc_operation do |name, request, options:|
      assert_equal :compute_route_matrix, name
      assert_kind_of ::Google::Maps::Routing::V2::ComputeRouteMatrixRequest, request
      assert_kind_of ::Google::Maps::Routing::V2::RouteMatrixOrigin, request["origins"].first
      assert_kind_of ::Google::Maps::Routing::V2::RouteMatrixDestination, request["destinations"].first
      assert_equal :TRAVEL_MODE_UNSPECIFIED, request["travel_mode"]
      assert_equal :ROUTING_PREFERENCE_UNSPECIFIED, request["routing_preference"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Timestamp), request["departure_time"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Timestamp), request["arrival_time"]
      assert_equal "hello world", request["language_code"]
      assert_equal "hello world", request["region_code"]
      assert_equal [:EXTRA_COMPUTATION_UNSPECIFIED], request["extra_computations"]
      assert_equal :TRAFFIC_MODEL_UNSPECIFIED, request["traffic_model"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Maps::Routing::V2::TransitPreferences), request["transit_preferences"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, compute_route_matrix_client_stub do
      # Create client
      client = ::Google::Maps::Routing::V2::Routes::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.compute_route_matrix({ origins: origins, destinations: destinations, travel_mode: travel_mode, routing_preference: routing_preference, departure_time: departure_time, arrival_time: arrival_time, language_code: language_code, region_code: region_code, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences }) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Maps::Routing::V2::RouteMatrixElement, r
        end
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.compute_route_matrix origins: origins, destinations: destinations, travel_mode: travel_mode, routing_preference: routing_preference, departure_time: departure_time, arrival_time: arrival_time, language_code: language_code, region_code: region_code, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Maps::Routing::V2::RouteMatrixElement, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.compute_route_matrix ::Google::Maps::Routing::V2::ComputeRouteMatrixRequest.new(origins: origins, destinations: destinations, travel_mode: travel_mode, routing_preference: routing_preference, departure_time: departure_time, arrival_time: arrival_time, language_code: language_code, region_code: region_code, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Maps::Routing::V2::RouteMatrixElement, r
        end
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.compute_route_matrix({ origins: origins, destinations: destinations, travel_mode: travel_mode, routing_preference: routing_preference, departure_time: departure_time, arrival_time: arrival_time, language_code: language_code, region_code: region_code, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences }, grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Maps::Routing::V2::RouteMatrixElement, r
        end
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.compute_route_matrix(::Google::Maps::Routing::V2::ComputeRouteMatrixRequest.new(origins: origins, destinations: destinations, travel_mode: travel_mode, routing_preference: routing_preference, departure_time: departure_time, arrival_time: arrival_time, language_code: language_code, region_code: region_code, extra_computations: extra_computations, traffic_model: traffic_model, transit_preferences: transit_preferences), grpc_options) do |response, operation|
        assert_kind_of Enumerable, response
        response.to_a.each do |r|
          assert_kind_of ::Google::Maps::Routing::V2::RouteMatrixElement, r
        end
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, compute_route_matrix_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Maps::Routing::V2::Routes::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Maps::Routing::V2::Routes::Client::Configuration, config
  end
end
