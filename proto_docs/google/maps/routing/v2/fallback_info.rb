# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Maps
    module Routing
      module V2
        # Information related to how and why a fallback result was used. If this field
        # is set, then it means the server used a different routing mode from your
        # preferred mode as fallback.
        # @!attribute [rw] routing_mode
        #   @return [::Google::Maps::Routing::V2::FallbackRoutingMode]
        #     Routing mode used for the response. If fallback was triggered, the mode
        #     may be different from routing preference set in the original client
        #     request.
        # @!attribute [rw] reason
        #   @return [::Google::Maps::Routing::V2::FallbackReason]
        #     The reason why fallback response was used instead of the original response.
        #     This field is only populated when the fallback mode is triggered and the
        #     fallback response is returned.
        class FallbackInfo
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # Reasons for using fallback response.
        module FallbackReason
          # No fallback reason specified.
          FALLBACK_REASON_UNSPECIFIED = 0

          # A server error happened while calculating routes with your preferred
          # routing mode, but we were able to return a result calculated by an
          # alternative mode.
          SERVER_ERROR = 1

          # We were not able to finish the calculation with your preferred routing mode
          # on time, but we were able to return a result calculated by an alternative
          # mode.
          LATENCY_EXCEEDED = 2
        end

        # Actual routing mode used for returned fallback response.
        module FallbackRoutingMode
          # Not used.
          FALLBACK_ROUTING_MODE_UNSPECIFIED = 0

          # Indicates the `TRAFFIC_UNAWARE` [google.maps.routing.v2.RoutingPreference]
          # was used to compute the response.
          FALLBACK_TRAFFIC_UNAWARE = 1

          # Indicates the `TRAFFIC_AWARE`
          # {::Google::Maps::Routing::V2::RoutingPreference RoutingPreference} was used to
          # compute the response.
          FALLBACK_TRAFFIC_AWARE = 2
        end
      end
    end
  end
end
